// reverse_psn.js

// 1) Paste your full hex dump including Ethernet/IP/UDP here:
const fullHex = `
01005e0a0a0a001c426f84ac080045000428298a0000011154500ad33704ec0a0a0adcf5dcf50414c1625567088400000c008cc4680000000000020071010100f4830200588000000c0000000000000000000000000001000c0000000000000000000000000002000c00000000000000000000000000030004000000803f04000c0000000000000000000000000005000c000000000000000000000000000300588000000c000000000000000000dafa334401000c0000000000000000000000000002000c00000000000000000000000000030004000000803f04000c0000000000000000000000000005000c000000000000000000000000000400588000000c0000000000000000004dff334401000c0000000000000000000000000002000c00000000000000000000000000030004000000803f04000c0000000000000000000000000005000c000000000000000000000000000500588000000c00000000000000000042ff334401000c0000000000000000000000000002000c00000000000000000000000000030004000000803f04000c0000000000000000000000000005000c000000000000000000000000000600588000000c0000000000000000004dff334401000c0000000000000000000000000002000c00000000000000000000000000030004000000803f04000c0000000000000000000000000005000c000000000000000000000000000700588000000c0000000000000000004dff334401000c0000000000000000000000000002000c00000000000000000000000000030004000000803f04000c0000000000000000000000000005000c000000000000000000000000000800588000000c00000000000000000093fe334401000c0000000000000000000000000002000c00000000000000000000000000030004000000803f04000c0000000000000000000000000005000c000000000000000000000000000900588000000c00000000000000000093fe334401000c0000000000000000000000000002000c00000000000000000000000000030004000000803f04000c0000000000000000000000000005000c000000000000000000000000000a00588000000c000000000000000000b0fd334401000c0000000000000000000000000002000c00000000000000000000000000030004000000803f04000c0000000000000000000000000005000c000000000000000000000000000b00588000000c0000000000000000000000000001000c0000000000000000000000000002000c00000000000000000000000000030004000000803f04000c0000000000000000000000000005000c000000000000000000000000000c00588000000c0000000000000000000000000001000c0000000000000000000000000002000c00000000000000000000000000030004000000803f04000c0000000000000000000000000005000c00000000000000000000000000
`.replace(/\s+/g, '');

const buf = Buffer.from(fullHex, 'hex');

// 2) Drop the first 14+20+8 = 42 bytes (Ethernet + IPv4 + UDP headers)
const psnPayload = buf.slice(42);

// 3) Now run the exact regex over the PSN payload
const hex = psnPayload.toString('hex');
const re = /(00000c00[0-9a-f]{24}|01000c00[0-9a-f]{24}|02000c00[0-9a-f]{24}|03000400[0-9a-f]{8}|04000c00[0-9a-f]{24}|05000c00[0-9a-f]{24}|06000800[0-9a-f]{16})/gi;

const subs = [];
let m;
while ((m = re.exec(hex))) {
  const h = m[0];
  const id    = parseInt(h.slice(0,4), 16);
  const len   = parseInt(h.slice(4,8), 16);
  const data  = Buffer.from(h.slice(8,8 + len*2), 'hex');
  subs.push({ id, data });
}

// 4) Group by POS (id=0x0000) into trackers
const trackers = {};
let idx = 0;
for (const {id, data} of subs) {
  if (id === 0x0000) {
    idx += 1;
    trackers[idx] = { pos: {
      x: data.readFloatLE(0),
      y: data.readFloatLE(4),
      z: data.readFloatLE(8)
    }};
  } else if (trackers[idx]) {
    if (id === 0x0001) {
      trackers[idx].speed = {
        x: data.readFloatLE(0),
        y: data.readFloatLE(4),
        z: data.readFloatLE(8)
      };
    } else if (id === 0x0002) {
      trackers[idx].orientation = {
        x: data.readFloatLE(0),
        y: data.readFloatLE(4),
        z: data.readFloatLE(8)
      };
    } else if (id === 0x0003) {
      trackers[idx].validity = data.readFloatLE(0);
    } else if (id === 0x0004) {
      trackers[idx].accel = {
        x: data.readFloatLE(0),
        y: data.readFloatLE(4),
        z: data.readFloatLE(8)
      };
    } else if (id === 0x0005) {
      trackers[idx].targetPos = {
        x: data.readFloatLE(0),
        y: data.readFloatLE(4),
        z: data.readFloatLE(8)
      };
    }
  }
}

console.log(`Found ${idx} trackers:`);
console.dir(trackers, { depth: null });
